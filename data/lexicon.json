{
"Cmd": {
    "2nd": {
        "node_type": "Token",
        "token_type": "Cmd",
        "name": "SetRoot",
        "desc": "Set Root Note",
        "children": [
            {"node_type": "ChildToken",
            "token_type": "Tone",
            "desc": "tone to become new root",
            "notedesc": "New Root Tone",
            "print": "{notename}",
            "print_staff": "{notename}"}
        ],
        "print": "<span class='cmt'>// set root note to {exp}</span>",
        "print_staff": "Set Root",
        "childCmds": false
    },
    "3rd": {
        "node_type": "Token",
        "token_type": "Cmd",
        "name": "Let",
        "desc": "Let",
        "children": [
            {"node_type": "ChildToken",
            "token_type": "Tone",
            "print": "{varname}",
            "print_staff": "{varname}",
            "desc": "tone for a variable"},
            {"node_type": "ChildToken",
            "token_type": "Exp",
            "desc": "expression"}
        ],
        "print": "<span class='var'>{exp}</span> = {exp};",
        "print_staff": "Let",
        "childCmds": false
    },
    "root": {
        "node_type": "Category",
        "desc": "Blocks (root)",
        "root": {
            "root": {
                "type": "Token",
                "name": "EndProgram",
                "desc": "End Program",
                "print": "// end program",
                "print_staff": "End Program"
            },
            "childCmds": false
        },
        "2nd": {
            "node_type": "Token",
            "token_type": "Cmd",
            "name": "While",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "Expression"}
            ],
            "childCmds": true,
            "print": "<span class='key'>while</span> ({exp}) {",
            "print_staff": "While"
        },
        "3rd": {
            "node_type": "Token",
            "token_type": "Cmd",
            "name": "EndBlock",
            "desc": "End Block",
            "print": "}",
            "print_staff": "End Block",
            "childCmds": false
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Cmd",
            "name": "If",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "Expression"}
            ],
            "childCmds": true,
            "print": "<span class='key'>if</span> ({exp}) {",
            "print_staff": "If"
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Cmd",
            "name": "Else",
            "childCmds": true,
            "print": "} else {",
            "print_staff": "Else"
        }
    },
    "6th": {
        "node_type": "Category",
        "desc": "I/O (6th)",
        "4th": {
            "type": "Token",
            "name": "Input",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Tone",    
                "desc": "Variable to store input"}
            ],
            "print": "let {varname} = get_input();",
            "print_staff": "Input"
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Cmd",    
            "name": "Print",
            "print": "print({exp});",
            "print_staff": "Print",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "Expression"}
            ]
        }
    },
    "7th": {
        "node_type": "Token",
        "token_type": "Cmd",
        "name": "Undo",
        "desc": "Undo Last Command"
    }
},
"Exp": {
    "root": {
        "node_type": "Category",
        "desc": "Value (1st / root)",
        "2nd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Variable",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Tone",    
                "desc": "tone for a variable",
                "print": " {varname}",
                "print_staff": " {varname}"}
            ],
            "print": "<span class='var'>{exp}</span>",
            "print_staff": "Variable"
        },
        "3rd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "NegativeInt",
            "desc": "Negative Int",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": " -{seq_int}",
                "print_staff": "-{seq_int}"}
            ],
            "print": "{exp}",
            "print_staff": "neg int"
        },
        "4th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Char",
            "desc": "Char (Unicode)",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "Single note for each digit, avoiding 5th",
                "print": " {seq_char}",
                "print_staff": "{seq_char}"}
            ],
            "print": "{exp}",
            "print_staff": "Char"
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "PositiveInt",
            "desc": "Positive Int",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": " {seq_int}",
                "print_staff": " {seq_int}"}
            ],
            "print":"{exp}",
            "print_staff": "int"
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "PositiveFloat",
            "desc": "Positive Float",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": "{seq_int}"},
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": ".{seq_int} ",
                "print_staff": ".{seq_int} "}
            ],
            "print": "{exp}",
            "print_staff": "{exp}"
        },
        "7th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "NegativeFloat",
            "desc": "Negative Float",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": "{seq_int}"},
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": ".{seq_int}",
                "print_staff": ".{seq_int}"}
            ],
            "print": "-{exp}",
            "print_staff": "-{exp}"
        }
    },
    "3rd": {
        "node_type": "Category",
        "desc": "Conditional (3rd)",
        "2nd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Equality",
            "desc": "Equality (==)",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} == {exp})",
            "print_staff": "=="
        },
        "3rd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "GreaterThan",
            "desc": "Greater Than (&gt;)",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} &gt; {exp})",
            "print_staff": ">"
        },
        "4th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "LessThan",
            "desc": "Less Than (&lt;)",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} &lt; {exp})",
            "print_staff": "<"
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Not",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],            
            "desc": "NOT",
            "print": "(!{exp})",
            "print_staff": "NOT"
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "And",
            "desc": "AND",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} && {exp})",
            "print_staff": "AND"
        },
        "7th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Or",
            "desc": "OR",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} || {exp})",
            "print_staff": "OR"
        }
    },
    "5th": {
        "node_type": "Category",
        "desc": "Math (5th)",
        "2nd": {
            "type": "Token",
            "name": "Subtract",
            "desc": "-",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} - {exp})",
            "print_staff": "-"
        },
        "3rd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Add",
            "desc": "+",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} + {exp})",
            "print_staff": "+"
        },
        "4th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Divide",
            "desc": "/",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} / {exp})",
            "print_staff": "/"
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Multiply",
            "desc": "*",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} * {exp})",
            "print_staff": "*"
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Modulus",
            "desc": "%",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"},
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "expression"}
            ],
            "print": "({exp} % {exp})",
            "print_staff": "%"
        }
    }
}}
