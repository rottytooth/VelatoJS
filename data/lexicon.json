{
"Cmd": {
    "2nd": {
        "node_type": "Token",
        "token_type": "Cmd",
        "name": "SetRoot",
        "desc": "Set Root Note",
        "children": [
            {"node_type": "ChildToken",
            "token_type": "Tone",
            "desc": "tone to become new root",
            "notedesc": "New Root Tone",
            "print": "<span class='cmt'>// set root note to {varname}</span>\n"}
        ],
        "childCmds": false
    },
    "3rd": {
        "node_type": "Token",
        "token_type": "Cmd",
        "name": "Let",
        "desc": "Let",
        "children": [
            {"node_type": "ChildToken",
            "token_type": "Tone",
            "desc": "tone for a variable",
            "print": "<span class='var'>{varname}</span> = "},
            {"node_type": "ChildToken",
            "token_type": "Exp",
            "desc": "expression",
            "postprint": ";"}
        ],
        "childCmds": false
    },
    "root": {
        "node_type": "Category",
        "desc": "Blocks (root)",
        "root": {
            "root": {
                "type": "Token",
                "name": "EndProgram",
                "desc": "End Program",
                "print": "// end program"
            },
            "childCmds": false
        },
        "2nd": {
            "node_type": "Token",
            "token_type": "Cmd",
            "name": "While",
            "print": "<span class='key'>while</span> (",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "Expression",
                "postprint": " {"}
            ],
            "childCmds": true
        },
        "3rd": {
            "node_type": "Token",
            "token_type": "Cmd",
            "name": "EndBlock",
            "desc": "End Block",
            "print": "}",
            "childCmds": false
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Cmd",
            "name": "If",
            "print": "<span class='key'>if</span> (",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "Expression",
                "postprint": " {"}
            ],
            "childCmds": true
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Cmd",
            "name": "Else",
            "childCmds": true,
            "print": "} else {"
        }
    },
    "6th": {
        "node_type": "Category",
        "desc": "I/O (6th)",
        "4th": {
            "type": "Token",
            "name": "Input",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Tone",    
                "desc": "Variable to store input",
                "print": "let {varname} = get_input();"}
            ]
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Cmd",    
            "name": "Print",
            "print": "print(",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Exp",
                "desc": "Expression",
                "postprint": ";"}
            ]
        }
    },
    "7th": {
        "node_type": "Token",
        "token_type": "Cmd",
        "name": "Undo",
        "desc": "Undo Last Command"
    }
},
"Exp": {
    "6th": {
        "node_type": "Category",
        "desc": "Procedural (6th)",
        "2nd": {
            "node_type": "Token",
            "token_type": "Exp",    
            "name": "CloseParens",
            "desc": ")",
            "print": ")",
            "note": "This ends all expressions"
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Exp",    
            "name": "OpenParens",
            "desc": "(",
            "print": "("
        }
    },
    "root": {
        "node_type": "Category",
        "desc": "Value (1st / root)",
        "2nd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Variable",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "Tone",    
                "desc": "tone for a variable",
                "print": " {varname}"}
            ]
        },
        "3rd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "NegativeInt",
            "desc": "Negative Int",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": " -{seq_int}"}
            ]
        },
        "4th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Char",
            "desc": "Char (Unicode)",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "Single note for each digit, avoiding 5th",
                "print": " {seq_char}"}
            ]
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "PositiveInt",
            "desc": "Positive Int",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": " {seq_int}"}
            ]
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "PositiveFloat",
            "desc": "Positive Float",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": " {seq_int}"},
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": ".{seq_int} "}
            ]
        },
        "7th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "NegativeFloat",
            "desc": "Negative Float",
            "children": [
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": " {seq_int}"},
                {"node_type": "ChildToken",
                "token_type": "NonFifthTone*",
                "desc": "single note for each digit, avoiding 5th",
                "print": ".{seq_int} "}
            ]
        }
    },
    "3rd": {
        "node_type": "Category",
        "desc": "Conditional (3rd)",
        "2nd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Equality",
            "desc": "Equality (==)",
            "print": "=="
        },
        "3rd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "GreaterThan",
            "desc": "Greater Than (&gt;)",
            "print": "&gt;"
        },
        "4th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "LessThan",
            "desc": "Less Than (&lt;)",
            "print": "&lt;"
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Not",
            "desc": "NOT",
            "print": "!"
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "And",
            "desc": "AND",
            "print": "&&"
        },
        "7th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Or",
            "desc": "OR",
            "print": "||"
        }
    },
    "5th": {
        "node_type": "Category",
        "desc": "Math (5th)",
        "2nd": {
            "type": "Token",
            "name": "Subtract",
            "desc": "-"
        },
        "3rd": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Add",
            "desc": "+",
            "print": "+"
        },
        "4th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Divide",
            "desc": "/",
            "print": "/"
        },
        "5th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Multiply",
            "desc": "*",
            "print": "*"
        },
        "6th": {
            "node_type": "Token",
            "token_type": "Exp",
            "name": "Modulus",
            "desc": "%",
            "print": "%"
        }        
    }
}
}